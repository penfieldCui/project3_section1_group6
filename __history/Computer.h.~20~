#ifndef ComputerH
#define ComputerH

#include <string>
#include <vector>

using namespace std;

class Component {
public:
    enum ComponentType { MICROPHONE, CAMERA, CPU, RAM };
    Component(ComponentType type, int cpuUsage, int ramUsage);
    void PowerOn();
    void PowerOff();
    bool IsPoweredOn() const;

	int GetCpuUsage() const;
    int GetRamUsage() const;

private:
    ComponentType type;
	bool poweredOn;
	int cpuUsage; // of single component
	int ramUsage; //
};

class Computer {
public:

	Computer(const string &ipAddress, const string &name, int totalRam);

	// Use Timer to update
	void UpdateUsage();

	// components
	void AddComponent(const Component& component);
	std::string GetStatusReport() const;

	// power
    void PowerOn();
    void PowerOff();
	bool IsPoweredOn() const;
	// network
	void Connect();
	void Disconnect();
	bool IsConnected() const;

	//
//	void AdjustBrightness(int level);


	string GetName() const;

    // Accessor methods
	string GetIpAddress() const;
	int GetTotalCpuCores() const;
	int GetTotalRam() const;
	int GetCpuUsage() const;
	int GetRamUsage() const;
//    int GetBrightness() const;




private:
    std::string ipAddress;  // 计算机的 IP 地址
    std::string name;       // 计算机的名称
    int totalCpuCores;      // 计算机的 CPU 核心数
    int totalRam;           // 计算机的总 RAM 大小 (MB)
    int usedCpuCores;       // 当前使用的 CPU 核心数
	int usedRam;            // 当前使用的 RAM 大小 (MB)

	bool poweredOn;         // 电源状态
    bool connected;         // 网络连接状态
	std::vector<Component> components; // 计算机的组件列表

	void CalculateUsage();
};

#endif

